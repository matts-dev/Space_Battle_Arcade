{ 

    "questions" :
    [
       {
             "question" : "To write custom AA within the shader, a multisampled texture can be sampled through 'gvec4 texelFetch(sampler2DMS sampler,ivec2 P,sample sample);' What is NOT true?",
             "answers" :
             [
               {"*":"Sampling directly from multisample color attachment still require an intermediate buffer to blit to."},
               {"x":"The texture coords are integers, these are pixel locations to sample from. Regular textures have the range [0,1], but this have [0, pixelHeight/Width]"},
               {"x":"Converting to the texture range [0, pixelWidth] and [0, pixelHeight] can be done by multiplying the [0,1] texture coord range with pixelWidth and pixelHeight"},
               {"x":"The last argument is the sample number to query"},
               {"x":"'texelFetch(screencapture, vpCoords, 3);' fetches the 4th sample at the pixel location 'vpCoords'."}
             ]
       },

       {
        "question" : "When bliting from a multisample buffer to an intermediate single-sample-colorbuffer, must you set up texture filtering (eg GL_NEAREST) on the intermediate buffer?",
        "answers" :
        [
          {"*":"Yes, since you will sample from this texture in a shader, you need to instruct what to do about sampling between texture locations."},
          {"x":"No, the color attachment will already be filtered."}
        ],
        "explanation" : "Without this configuration, the screen will be black."
       },


{
    "question" : "OpenGL uses Super sample anti aliasing (SSAA)? Where the image is drawn at a larger size and downsampled.",
    "answers" :
    [
      {"*":"False, OpenGL uses MSAA which has multiple samples for a single pixel(fragment)."},
      {"x":"True, OpenGL MSAA has the same efficiency as SSAA."}
    ],
    "explanation" : "While these might technically have the same output, the tutorial makes a distinction."
},

{
  "question" : "The OpenGL's MSAA only runs one fragment shader per pixel.",
  "answers" :
  [
    {"*":"true, the vertex data (eg color) is determined by the center of the pixel. The same color is stored in samples IFF they are covered by the primitive."},
    {"x":"false, the vertex data (eg color) is determined at each of the samples. Different colors are stored in the primitive based on the shading at the sample location."}
  ],
  "explanation" : "Each sample that is contained in the primitive will have the same color. At the end, samples are blended together for each pixel. Samples thus have depth buffers associated withm them. If a sample is never filled, the clear color is what it contains."
},

{
  "question" : "What is NOT a required step to enable 4xMSAA for the default framebuffer (using GLFW as a windowing library)",
  "answers" :
  [
    {"*":"Generate a multisample color buffer and configure it."},
    {"x":"glfwWindowHint(GLFW_SAMPLES, 4);"},
    {"x":"glEnable(GL_MULTISAMPLE);"}
  ],
  "explanation" : "For the default frame buffer, you only need to enable MSAA and give the windowing library a hint. Everything else is automatic and you don't need to worry about manual sampling"
},


{
  "question" : "Offscreen MSAA requires all of the following EXCEPT?",
  "answers" :
  [
    {"*":"Special sampling fragment shaders"},
    {"x":"Creation of a multisample framebuffer to render to."},
    {"x":"Creation of an intermediate framebuffer buffer to blit to."}
  ],
  "explanation" : "You can use the default MSAA by simply writing a fragment shader as you normally would (assuming you blit to a texture). You do not need to manually write shader code that queries individual samples"
},


{
  "question" : "What is an invalid step in creating a multisample framebuffer?",
  "answers" :
  [
    {"*":"All of the steps are appropriate"},
    {"x":"Create a GL_TEXTURE_2D_MULTISAMPLE texture to use as a color attachment"},
    {"x":"Create a GL_RENDERBUFFER attachment for stencil/depth using the glRenderBufferStorageMultisample call"}
  ],
  "explanation" : "One could instead create a stencil/depth buffer out of a normal texture too, but that is less than ideal because they are slower and we normally don't need to sample that information."
},

{
  "question" : "What is NOT an required step in creating a multisample color attachment texture and attaching it to a framebuffer for 'offscreen' MSAA?",
  "answers" :
  [
    {"*":"The multisample texture must have its filtering set (eg GL_NEAREST)"},
    {"x":"glBindTexture(GL_TEXTURE_2D_MULTISAMPLE, tex);"},
    {"x":"glTexImage2DMultisample(GL_TEXTURE_2D_MULTISAMPLE, samples, GL_RGB, width, height, GL_TRUE);"},
    {"X":"glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D_MULTISAMPLE, tex, 0);"}
  ],
  "explanation" : "We are not going to sample this texture, we are going to blit the texture to an intermediate. Thus, we do not need to set the sampling filters on THIS particular texture attachment. The blit texture will require filtering because it will be sampled from."
},

{
  "question" : "What is an incorrect step in setting up a depth/stencil renderbuffer for MSAA?",
  "answers" :
  [
    {"*":"glRenderbufferStorageMultisample(GL_RENDERBUFFER_MULTISAMPLE, num_samples, GL_DEPTH24_STENCIL8, screenWidth, screenHeight);"},
    {"x":"glBindRenderBuffer(GL_RENDERBUFFER, rbo);"},
    {"x":"glRenderbufferStorageMultisample(GL_RENDERBUFFER, num_samples, GL_DEPTH24_STENCIL8, screenWidth, screenHeight);"},
    {"X":"glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHEMENT, GL_RENDERBUFFER, rbo);"}
  ],
  "explanation" : "GL_RENDERBUFFER_MULTISAMPLE is not a valid enum"
},
{
  "question" : "What is not true about glBlitFramebuffer?",
  "answers" :
  [
    {"*":"glBlitFramebuffer has trouble when blitting from a MSAA buffer to a standard color buffer."},
    {"x":"glBlitFramebuffer copies from the GL_READ_FRAMEBUFFER to the GL_DRAW_FRAMEBUFFER."},
    {"x":"The mask parameter specifies which attachments you would like to blit/copy (eg GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_STENCIL_BUFFER_BIT)"},
    {"X":"The filtering parameter specifies how the texture should be sampled during the blit *if it is streched*. (eg GL_NEAREST, GL_LINEAR)"}
  ],
  "explanation" : ""
},
{
  "question" : "Writing custom AA algorithms require all BUT what?",
  "answers" :
  [
    {"*":"Required to still blit to an intermediate texture"},
    {"x":"uniform sampler2DMS screenTextureMS;"},
    {"x":"texture coordintes that are integers that are from [0, width] and [0, height] rather than [0, 1]."},
    {"X":"texelFetch(screenTextureMS, TexCoords, sampleIndex); //sampleIndex being 0-3 for 4 sample AA"}
  ],
  "explanation" : "You do not need to blit, you can directly sample the multisample colorattachment with texelFetch."
}

    ]
}