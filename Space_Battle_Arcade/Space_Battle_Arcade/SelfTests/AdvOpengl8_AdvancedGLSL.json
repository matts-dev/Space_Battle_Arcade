{
    "questions" :
    [
       {
             "question" : "gl_PointSize is a GLSL built-in variable of the ______ shader?",
             "answers" :
             [
               {"*":"vertex"},
               {"x":"fragment"}
             ]
       },

      {
        "question" : "gl_VertexID is available in the fragment shader",
        "answers" :
        [
          {"*":"false"},
          {"x":"true"}
        ],
        "comment" : "this is a vertex shader built-in variable"
      },

      {
        "question" : "What's the range of gl_FragCoord.xy?",
        "answers" :
        [
          {"*":"x ranges the viewport width, y ranges the viewport height, with 0,0 in the bottom left corner"},
          {"x":"x ranges the viewport width, y ranges the viewport height, with 0,0 in the top left corner"},
          {"x":"x ranges the [-1,1], y ranges [-1, 1], with 0,0 in the center"}
        ]
      },

      {
        "question" : "gl_FrontFacing is a fragment shader built-in",
        "answers" :
        [
          {"*":"true"},
          {"x":"false"}
        ]
      },

      {
        "question" : "What is the major performance implication of modifying FragmentShader's builtin input/output gl_FragDepth?",
        "answers" :
        [
          {"*":"Modifying gl_FragDepth prevents the fragment shader from running early depth testing."},
          {"x":"Modifying gl_FragDepth can give unexpected depth buffer results."},
          {"x":"Modifying gl_FragDepth causes internal branching behavior on the gpu."}
        ]
      },

      {
        "question" : "Opengl 420 provides: 'layout (depth_greater) out float gl_FragDepth;' to the fragment shader to help maintain some early depth testing, which layout is the default behavior? ",
        "answers" :
        [
          {"*":"layout(depth_any) - Early depth testing is disabled and you lose most performance."},
          {"x":"layout(depth_greater) - You can only make the depth value larger compared to gl_FragCoord.z."},
          {"x":"layout(depth_less) - You can only make the depth value smaller compared to gl_FragCoord.z."},
          {"X":"layout(depth_unchanged) - If you write to gl_FragDepth, you will write exactly gl_FragCoord.z"}
        ]
      }, 

      {
        "question" : "Which of the behaviors for input variable gl_VertexID is incorrect",
        "answers" :
        [
          {"*":"When drawing with glDrawArrays, gl_VertexID is an int representing the currently drawing triangle"},
          {"x":"When drawing with glDrawArrays, gl_VertexID is an int representing the currently drawing vertex"},
          {"x":"When drawing with glDrawElements, gl_VertexID is an int representing the currently drawing index"}
        ]
      },

      {
        "question" : "gl_PointSize requires all but 1 of the below to work.",
        "answers" :
        [
          {"X":"glEnable(GL_PROGRAM_POINT_SIZE);"},
          {"x":"a draw command with GL_POINTS, like glDrawArrays(GL_POINTS, 0, 1);"},
          {"*":"a draw command with GL_POINT, like glDrawArrays(GL_POINT, 0, 1);"}
        ]
      },


      {
        "question" : "plain-old Interfaceblocks require that you access them in the pattern 'name.member', eg in 'VS_OUT{vec2 TexCoords;} fs_in;' TexCoords must be accessed like 'fs_in.TexCoords'",
        "answers" :
        [
          {"*":"true"},
          {"x":"false"}
        ]
    },

    {
      "question" : "What is an appropriate fragment-shader-interface-block to match following vertex-shader-interface-block: 'out VS_OUT { vec2 TexCoords; } vs_out;'",
      "answers" :
      [
        {"*":" 'in VS_OUT { vec2 TexCoords;} fs_in;'"},
        {"x":" 'in VS_IN { vec2 TexCoords;} fs_in;'"},
        {"x":" 'out VS_OUT { vec2 TexCoords;} fs_in;'"},
        {"X":" 'out VS_OUT { vec2 TexCoords; } vs_out;'"}
      ]
    },

    {
      "question" : "Interface blocks give you the ability to group varaibles (in the vs shader) that are sent to the fragment shader for interpolation",
      "answers" :
      [
        {"*":"true"},
        {"x":"false"}
      ]
    },


    {
      "question" : "Uniform buffer objects are global to all shaders via bindings",
      "answers" :
      [
        {"*":"true, multiple shaders can share a allocated GL_UNIFORM_BUFFER if those shaders share the same binding point"},
        {"x":"false, bindings are only used to map a single GL_UNIFORM_BUFFER to a single shader."}
      ]
    },

    {
      "question" : "Which of the following is the best way to generate a uniform block on the cpu side? bo is an unsigned int",
      "answers" :
      [
        {"*":"glGenBuffers(1, &bo);   glBindBuffer(GL_UNIFORM_BUFFER, bo);"},
        {"x":"glGenBuffers(1, &bo);   glBindBuffer(GL_ARRAY_BUFFER, bo);"},
        {"x":"glGenBuffers(1, &bo);   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bo);"}
      ]
    },

    {
      "question" : "Which of the following is true in regards to memory layout of uniform blocks",
      "answers" :
      [
        {"*":"All of the answers are true."},
        {"X":"shared layout - aligment offsets are defined by hardware and can be repositioned for optimizations. They layout is shared between shader programs, but the memory offset layout isn't predictable across machines and must be queried."},
        {"x":"std140 layout - aligment offsets are defined by a set of rules. These rules are known and therefore can be used to calculate offsets. This must be enabled by 'layout (std140) uniform BlockName {...};'"},
        {"X":"std140 layout deals in multiples of n, where n is 4 bytes. float/int/bool require n memory, vec2 requires 2n memory, vec3/vec4 require 4n memory, and mat4 requires 4 vec4 amount of memory (16n)."},
        {"X":"std140 layout is less efficient than shared layout."}
      ]
    },

    {
      "question" : "which of the following definitions is WRONG?",
      "answers" :
      [
        {"*":"They are both correct"},
        {"x":"base alignment - the space a variable takes in a uniform block, includding its padding"},
        {"x":"aligment offset - byte offset of a variable from the start of a block"}
      ]
    },

    {
      "question" : "How are uniform buffer bindings used?",
      "answers" :
      [
        {"*":"A shader's uniform block is assigned a binding, a uniform buffer is assigned a binding. This binding maps the two together."},
        {"x":"A shader's uniform block is assigned a binding, that binding is the uniform buffer id. This is how the two are mapped together."},
        {"x":"A uniform buffer is assigned a binding which is the result of querying a shader for its uniform block index eg:  glGetUniformBlockIndex(shaderA.ID, ''Lights'')"},
        {"X":"A binding is created and a shader's uniform block location and a cpu's uniform_buffer id are bound to slots in the binding."}
      ]
    },

    {
      "question" : "What is wrong with the following assigning a shader a binding: GLuint blk = glGetUniformBlockLoc(shader.ID, ''lights''); glUnfiromBLockBinding(shader.ID, blk, 2);",
      "answers" :
      [
        {"*":"The call to get the blk should be glGetUniformBlockIndex."},
        {"x":"2 is not a valid block binding."},
        {"x":"the binding argument (2) should be the second parameter."},
        {"X":"The use of shader.ID is redundant in the second call."}
      ]
    },

    {
      "question" : "Which of the following is an incorrect way to assign a binding '2' to a buffer of length 160?",
      "answers" :
      [
        {"*":"glBindBufferBase(GL_UNIFORM_BUFFER, uboExampleBlock, 2); "},
        {"x":"glBindBufferBase(GL_UNIFORM_BUFFER, 2, uboExampleBlock); "},
        {"x":"glBindBufferRange(GL_UNIFORM_BUFFER, 2, uboExampleBlock, 0, 160);"},
        {"X":"glBindBufferRange(GL_UNIFORM_BUFFER, 2, uboLargeBlock, 160, 320);"}
      ]
    },

    {
      "question" : "What is the correct way to set a value in a uniform block, after the following calls: glBindBuffer(GL_UNIFORM_BUFFER, uboExampleBlock); int b = true;",
      "answers" :
      [
        {"*":"glBufferSubData(GL_UNIFORM_BUFFER, alignment_offset, aligment_base, &b);"},
        {"x":"glBufferSubData(GL_UNIFORM_BUFFER, aligment_base, alignment_offset, &b);"},
        {"x":"glBufferSubData(GL_UNIFORM_BUFFER, &b, aligment_base, alignment_offset);"},
        {"X":"glBufferSubData(GL_UNIFORM_BUFFER, &b, alignment_offset, aligment_base);"}
      ]
    }
    ]
}